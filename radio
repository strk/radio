#!/bin/sh

#echo $LINES x $COLUMNS

VERSION=0.5dev

#
# HISTORY
#
# 0.5 - ???????????
#  o Add Kodi JazzRadio plugin station extracter
#  o Allow specifying station as pattern on cmdline
# 0.4 - Mar 28 2012
#  o Sort stations alphabetically
# 0.3 - May 4 2011
#  o Do not redirect input (fixes high CPU)
#  o Do not use ffmpeg:// prefix if the url doesn't end with .flv
# 0.2 - May 3 2011
#  o Use ffmpeg:// uri syntax for http (fixes support for some flv)
#  o Drop stations from package
#  o Fix run in absence of stations
#
# 0.1
#	Fixed dialog calls to support version 1.x
#
# 0.0
#	Initial release
#
#

# Set this variable to "1" to provide compatibility
# with older versions of dialog which assumed  that 
# if  the script redirects the standard output, that
# the "--stdout" option was given.
#export DIALOG_TTY=1

RADIOPATH="/etc/radio/:$HOME/.radio"

TMPDIR="/tmp/`basename $0`-$$"
trap 'rm -Rf ${TMPDIR}' 0
#trap 'echo ${TMPDIR}' 0
mkdir ${TMPDIR}

Play()
{
	url="$1"
	mplayer -noconsolecontrols "${url}" 
}


PrepareStationTags()
{
	dirs=`echo ${RADIOPATH} | tr ':' ' '`
	stations=`find ${dirs} -type f 2> /dev/null | sort`
	if test -z "$stations"; then
		echo "No available stations" >&2
		return;
	fi

	#echo "Stations: ${stations}"

	menu=''; tag=1;
	exec 3> ${TMPDIR}/menu
	exec 4> ${TMPDIR}/stations
	for s in ${stations}; do
		echo $tag `basename $s` >&3
		echo $tag $s >&4
		tag=$(($tag+1))
	done

}

ChooseStation()
{
	PrepareStationTags
	dialog --stdout \
		--menu \
		"- version $VERSION -\nChoose a station" \
		0 0 0 \
		`cat ${TMPDIR}/menu`
}

FindStation()
{
	Choice=$1
	file=`grep -i "${Choice}" ${TMPDIR}/stations | head -1 | cut -d' ' -f2-`
	if test -z "${file}"; then
		exit 1
	fi
	station=`basename $file`
	url=`cat $file | grep -v ^# | grep -v '^$'`
	if expr match "${url}" ^http > /dev/null; then
	 if expr match "${url}" '.*\.flv' > /dev/null; then
	  url=ffmpeg://"${url}"
	 fi
	fi

	# For debugging
	#echo "Choice: $Choice"
	#echo "File: $file"
	#echo "Station: $station"
	#echo "URL: $url"
	#exit;

	echo "${station}:${url}"
}

PlayMenu()
{
	Choice=$1
	station_data=`FindStation "${Choice}"`
	if test -z "${station_data}"; then
		echo "Cannot find station '${Choice}'" >&2
		exit 1
	fi
	station=`echo "${station_data}" | cut -d: -f1`
	url=`echo "${station_data}" | cut -d: -f2-`

	# For debugging
	#echo "Choice: $Choice"
	#echo "Station: $station"
	#echo "URL: $url"
	#exit;

	# check: -quiet -really-quiet
	# consider: grep StreamTitle
	Play "${url}" > /dev/null 2>&1 &
	playpid=$!

	while :; do
		w=`dialog --stdout --menu "Playing $station" 0 0 0 1 "Stop" 2 "Volume"`
		if test "$w" = '1'; then
			kill $playpid
			return
		elif test "$w" = '2'; then
			alsamixer
		fi
	done

}

MainMenu()
{
	Choice=`ChooseStation`
	if test -z "$Choice"; then
		exit;
	fi
	PlayMenu "^${Choice} "
}

if test -n "$1"; then
	Choice=$1
	PrepareStationTags
	station_data=`FindStation "${Choice}"`
	if test -z "${station_data}"; then
		echo "Cannot find station '${Choice}'" >&2
		exit 1
	fi
	station=`echo "${station_data}" | cut -d: -f1`
	url=`echo "${station_data}" | cut -d: -f2-`
	Play "${url}"
else
	while :; do
		MainMenu
	done
fi

